import express from "express";
import jwt from "jsonwebtoken";
import { authAdmin } from "../config/firebase.js";
import dotenv from "dotenv";

import {
  getUsers,
  getUser,
  updateUser,
  deleteUser,
} from "../controllers/userController.js";
import { verifyToken } from "../middleware/authMiddleware.js";

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
dotenv.config();

const router = express.Router();

// üîê –ó–∞—Ö–∏—â–µ–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
router.get("/", verifyToken, getUsers);
router.get("/:id", verifyToken, getUser);
router.put("/:id", verifyToken, updateUser);
router.delete("/:id", verifyToken, deleteUser);

// üî∏ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Firebase + –≤–∏–¥–∞—á–∞ JWT
router.post("/auth", async (req, res) => {
  try {
    const { idToken } = req.body;
    if (!idToken) {
      return res.status(400).json({ message: "–ù–µ–º–∞—î idToken" });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω Firebase
    const decoded = await authAdmin.verifyIdToken(idToken);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–ª–∞—Å–Ω–∏–π JWT
    const jwtToken = jwt.sign(
      { uid: decoded.uid, email: decoded.email },
      process.env.JWT_SECRET_KEY,
      { expiresIn: "7d" }
    );

    res.status(200).json({ jwt: jwtToken });
  } catch (error) {
    console.error("Auth error:", error);
    res.status(401).json({ message: "Invalid Firebase token" });
  }
});

export default router;
