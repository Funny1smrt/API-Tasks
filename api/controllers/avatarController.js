import { supabase } from "../config/supabase.js";
const LIMIT_AVATARS = 2;
export async function getAvatar(userId) {
  const { data, error } = await supabase.storage
    .from("avatars")
    .list(`${userId}/`); // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
  if (error) throw error;

  // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –∞–±–æ –ø–∞–ø–∫–∞ –ø–æ—Ä–æ–∂–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
  if (!data || data.length === 0) {
    return null;
  }
  // üîπ –°–æ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª–∏ –∑–∞ created_at, —â–æ–± –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π
  const sortedFiles = data.sort(
    (a, b) => new Date(b.created_at) - new Date(a.created_at)
  );

  const avatarFile = sortedFiles[0]; // –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π —Ñ–∞–π–ª
  const { data: urlData } = supabase.storage
    .from("avatars")
    .getPublicUrl(`${userId}/${avatarFile.name}`);
  return {
    name: avatarFile.name,
    url: urlData.publicUrl,
  };
}

export async function uploadAvatar(userId, file) {
  const fileName = `avatar.${Date.now()}.${
    file.mimetype.split("/")[1]
  }`;
  // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑–∞–≤–∂–¥–∏ –±—É–¥–µ –û–î–ù–ê–ö–û–í–ò–ô: [userId]/avatar.{name}.{type}
  const filePath = `${userId}/${fileName}`;

  const { error } = await supabase.storage
    .from("avatars")
    .upload(filePath, file.buffer, {
      contentType: file.mimetype,
      upsert: true, // –¶—è –æ–ø—Ü—ñ—è –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª—É
    });

  if (error) throw error;
  // 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const { data: files, error: listError } = await supabase.storage
    .from("avatars")
    .list(`${userId}/`);

  if (listError) throw listError;
  if (!files || files.length === 0) return;

  // 3Ô∏è‚É£ –Ø–∫—â–æ —Ñ–∞–π–ª—ñ–≤ –±—ñ–ª—å—à–µ –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π
  if (files.length > LIMIT_AVATARS) {
    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ created_at: –≤—ñ–¥ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ –¥–æ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ
    const sorted = files.sort(
      (a, b) => new Date(a.created_at) - new Date(b.created_at)
    );

    // –ë–µ—Ä–µ–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π —Ñ–∞–π–ª
    const oldestFile = sorted[0];

    console.log(`–í–∏–¥–∞–ª—è—é —Å—Ç–∞—Ä–∏–π –∞–≤–∞—Ç–∞—Ä: ${oldestFile.name}`);

    // 4Ô∏è‚É£ –í–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
    const { error: deleteError } = await supabase.storage
      .from("avatars")
      .remove([`${userId}/${oldestFile.name}`]);

    if (deleteError) console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:", deleteError);
  }
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL –¥–ª—è —â–æ–π–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
  const { data: urlData } = supabase.storage
    .from("avatars")
    .getPublicUrl(filePath);
  console.log("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä", urlData, filePath);
  return {
    url: urlData.publicUrl,
    path: filePath,
    name: fileName,
  };
}

export async function deleteAvatar(userId, fileName) {
  const { error } = await supabase.storage
    .from("avatars")
    .remove([`${userId}/${fileName}`]);
  if (error) throw error;
}