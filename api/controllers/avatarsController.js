import { supabase } from "../config/supabase.js";

export async function getAvatar(userId) {
  const { data, error } = await supabase.storage
    .from("avatars")
    .list(`${userId}/`); // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª

  if (error) throw error;

  // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –∞–±–æ –ø–∞–ø–∫–∞ –ø–æ—Ä–æ–∂–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
  if (!data || data.length === 0) {
    return null;
  }

  // üõë –ö–†–ò–¢–ò–ß–ù–ê –ó–ú–Ü–ù–ê: –û—Å–∫—ñ–ª—å–∫–∏ uploadAvatar –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î,
  // –≤ –ø–∞–ø—Ü—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Ñ–∞–π–ª, –∞–±–æ –º–∏ –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π.
  const avatarFile = data[0];

  const { data: urlData } = supabase.storage
    .from("avatars")
    .getPublicUrl(`${userId}/${avatarFile.name}`);
    console.log(urlData.publicUrl);

  return {
    name: avatarFile.name,
    url: urlData.publicUrl,
  };
}

export async function uploadAvatar(userId, file) {
  // üõë –ö–†–ò–¢–ò–ß–ù–ê –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –§–Ü–ö–°–û–í–ê–ù–£ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'avatar.jpeg')
  // –í–∏—Ç—è–≥—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ —Ç–∏–ø–æ–º MIME
  const extension = file.originalname.split(".").pop();
  const fileName = `avatar.${extension}`;

  // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑–∞–≤–∂–¥–∏ –±—É–¥–µ –û–î–ù–ê–ö–û–í–ò–ô: [userId]/avatar.jpeg
  const filePath = `${userId}/${fileName}`;

  const { error } = await supabase.storage
    .from("avatars")
    .upload(filePath, file.buffer, {
      contentType: file.mimetype,
      upsert: true, // –¶—è –æ–ø—Ü—ñ—è –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª—É
    });

  if (error) throw error;

  // –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL –¥–ª—è —â–æ–π–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
  const { data: urlData } = supabase.storage
    .from("avatars")
    .getPublicUrl(filePath);
    console.log(urlData.publicUrl);
  return {
    url: urlData.publicUrl,
    path: filePath,
    name: fileName,
  };
}