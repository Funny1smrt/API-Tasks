import jwt from "jsonwebtoken";

export const verifyToken = (req, res, next) => {
  const header = req.headers.authorization;

  if (!header) {
    return res.status(401).json({ message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞" });
  }

  const token = header.split(" ")[1];
  if (!token) {
    return res.status(401).json({ message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞" });
  }

  try {
    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω, –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞—à–∏–º JWT_SECRET_KEY
    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);

    // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É req –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö middleware –∞–±–æ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    req.user = decoded;

    next(); // –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞
  } catch (err) {
    console.error("JWT verify error:", err.message);
    res.status(403).json({ message: "–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
};
